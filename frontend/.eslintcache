[{"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\index.js":"1","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\App.js":"2","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\store.js":"3","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\utils\\setAuthToken.js":"4","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\actions\\auth.js":"5","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\layout\\Alert.js":"6","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\layout\\Navbar.js":"7","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\layout\\Landing.js":"8","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\auth\\Login.js":"9","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\auth\\Register.js":"10","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\dashboard\\Dashboard.js":"11","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\routing\\PrivateRoute.js":"12","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\CreateApplicantProfile.js":"13","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\CreateRecruiterProfile.js":"14","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\AddEdu.js":"15","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\EditRecruiterProfile.js":"16","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\EditApplicantProfile.js":"17","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\ReviewEdu.js":"18","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\MyProfile.js":"19","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\CreateJob.js":"20","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\ViewJob.js":"21","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\ApplyJob.js":"22","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\EditJob.js":"23","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\MyEmployees.js":"24","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\MyApplications.js":"25","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\actions\\alert.js":"26","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\actions\\types.js":"27","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\actions\\profile.js":"28","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\AllMyJobs.js":"29","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\AllJobs.js":"30","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\actions\\rjob.js":"31","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\Applicants.js":"32","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\Edu.js":"33","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\reducers\\index.js":"34","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\reducers\\auth.js":"35","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\reducers\\alert.js":"36","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\reducers\\profile.js":"37","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\reducers\\rjob.js":"38"},{"size":146,"mtime":1612162058000,"results":"39","hashOfConfig":"40"},{"size":3642,"mtime":1612162058000,"results":"41","hashOfConfig":"40"},{"size":382,"mtime":1612162058000,"results":"42","hashOfConfig":"40"},{"size":241,"mtime":1612162058000,"results":"43","hashOfConfig":"40"},{"size":2070,"mtime":1612162058000,"results":"44","hashOfConfig":"40"},{"size":483,"mtime":1612162058000,"results":"45","hashOfConfig":"40"},{"size":2360,"mtime":1612162058000,"results":"46","hashOfConfig":"40"},{"size":1120,"mtime":1651302985060,"results":"47","hashOfConfig":"40"},{"size":1889,"mtime":1652015839982,"results":"48","hashOfConfig":"40"},{"size":3920,"mtime":1652017003881,"results":"49","hashOfConfig":"40"},{"size":1473,"mtime":1612162058000,"results":"50","hashOfConfig":"40"},{"size":630,"mtime":1612162058000,"results":"51","hashOfConfig":"40"},{"size":2349,"mtime":1652019892904,"results":"52","hashOfConfig":"40"},{"size":1672,"mtime":1612162058000,"results":"53","hashOfConfig":"40"},{"size":1925,"mtime":1612162058000,"results":"54","hashOfConfig":"40"},{"size":2220,"mtime":1612162058000,"results":"55","hashOfConfig":"40"},{"size":2968,"mtime":1612162058000,"results":"56","hashOfConfig":"40"},{"size":1010,"mtime":1612162058000,"results":"57","hashOfConfig":"40"},{"size":3566,"mtime":1612162058000,"results":"58","hashOfConfig":"40"},{"size":4195,"mtime":1612162058000,"results":"59","hashOfConfig":"40"},{"size":3649,"mtime":1612162058000,"results":"60","hashOfConfig":"40"},{"size":1445,"mtime":1612162058000,"results":"61","hashOfConfig":"40"},{"size":2746,"mtime":1612162058000,"results":"62","hashOfConfig":"40"},{"size":2465,"mtime":1651463830654,"results":"63","hashOfConfig":"40"},{"size":2627,"mtime":1651463505814,"results":"64","hashOfConfig":"40"},{"size":345,"mtime":1612162058000,"results":"65","hashOfConfig":"40"},{"size":964,"mtime":1612162058000,"results":"66","hashOfConfig":"40"},{"size":3247,"mtime":1612162058000,"results":"67","hashOfConfig":"40"},{"size":1985,"mtime":1612162058000,"results":"68","hashOfConfig":"40"},{"size":16642,"mtime":1651462889116,"results":"69","hashOfConfig":"40"},{"size":6490,"mtime":1612162058000,"results":"70","hashOfConfig":"40"},{"size":5880,"mtime":1651463729404,"results":"71","hashOfConfig":"40"},{"size":1082,"mtime":1651464065429,"results":"72","hashOfConfig":"40"},{"size":231,"mtime":1612162058000,"results":"73","hashOfConfig":"40"},{"size":1070,"mtime":1612162058000,"results":"74","hashOfConfig":"40"},{"size":403,"mtime":1612162058000,"results":"75","hashOfConfig":"40"},{"size":801,"mtime":1612162058000,"results":"76","hashOfConfig":"40"},{"size":1753,"mtime":1612162058000,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1la6y6k",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\index.js",[],["166","167"],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\App.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\store.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\utils\\setAuthToken.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\actions\\auth.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\layout\\Alert.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\layout\\Navbar.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\layout\\Landing.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\auth\\Login.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\auth\\Register.js",["168","169","170","171","172","173","174","175","176","177"],"import React, { Fragment, useState } from 'react';\nimport { Link, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../../actions/alert';\nimport { register } from '../../actions/auth';\nimport PropTypes from 'prop-types';\nimport { createProfile } from '../../actions/profile';\nconst Register = ({\n  setAlert,\n  register,\n  isAuthenticated,\n  createProfile,\n  history,\n}) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    jobType: '',\n    password: '',\n    password2: '',\n  });\n\n  const { name, email, jobType, password, password2 } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const regex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\nif (password !== password2) {\n\n      setAlert('Passwords doesnt match', 'danger');\n      \n    }else if(regex.test(formData.email) === false){\n      setAlert('unfomated email', 'danger');\n    } else {\n      register({ name, email, password, jobType });\n    }\n  };\n\n  if (isAuthenticated) {\n    createProfile(formData, history, false, true, false);\n    if (jobType === 'JobApplicant') {\n      return <Redirect to='/createapplicantprofile' />;\n    } else {\n      return <Redirect to='/createrecruiterprofile' />;\n    }\n  }\n\n  return (\n    <Fragment>\n      {' '}\n      <section className='container'>\n        <h1 className='large text-primary'>Sign Up</h1>\n        <p className='lead'>Create Your Account</p>\n        <small>* = required field</small>\n        <form className='form' onSubmit={(e) => onSubmit(e)}>\n          <div className='form-group'>\n            <select\n              type='text'\n              name='jobType'\n              className='dropdown'\n              value={jobType}\n              onChange={(e) => onChange(e)}\n            >\n              <option value='' defaultValue disabled>\n                * choose a Job Type\n              </option>\n              <option value='JobApplicant'>JobApplicant</option>\n              <option value='Recruiter'>Recruiter</option>\n            </select>\n          </div>\n          <div className='form-group'>\n            <input\n              type='text'\n              placeholder='* Name'\n              name='name'\n              value={name}\n              onChange={(e) => onChange(e)}\n            />\n          </div>\n          <div className='form-group'>\n            <input\n              type='email'\n              placeholder='* Email Address'\n              name='email'\n              value={email}\n              onChange={(e) => onChange(e)}\n            />\n          </div>\n          <div className='form-group'>\n            <input\n              type='password'\n              placeholder='* Password'\n              name='password'\n              value={password}\n              onChange={(e) => onChange(e)}\n            />\n          </div>\n          <div className='form-group'>\n            <input\n              type='password'\n              placeholder='* Confirm Password'\n              name='password2'\n              value={password2}\n              onChange={(e) => onChange(e)}\n            />\n          </div>\n          <input type='submit' className='btn btn-primary' value='Register' />\n        </form>\n        <p className='my-1'>\n          Already have an account? <Link to='/login'>Sign In</Link>\n        </p>\n      </section>\n    </Fragment>\n  );\n};\n\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n  createProfile: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { setAlert, register, createProfile })(\n  withRouter(Register)\n);\n","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\dashboard\\Dashboard.js",["178"],"import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport AllMyJobs from '../jobs/AllMyJobs';\nimport AllJobs from '../jobs/AllJobs';\nimport { Link } from 'react-router-dom';\n//import { getCurrentProfile } from '../../actions/profile';\n//import { Link } from 'react-router-dom';\n\nconst Dashboard = ({ auth: { user, loading } }) => {\n  return (\n    <Fragment>\n      {loading ? (\n        <Fragment>Loading...</Fragment>\n      ) : (\n        <Fragment>\n          <h1 className='large'>Dashboard</h1>\n          <p className='lead text-dark'>\n            <strong>Welcome {user && user.name}</strong>\n          </p>\n          {user && (\n            <Fragment>\n              {user.jobType === 'JobApplicant' ? (\n                <Fragment>\n                  <AllJobs />\n                </Fragment>\n              ) : (\n                <Fragment>\n                  <Link className='btn btn-primary' to='/createjob'>\n                    <i className='fas fa-plus-square'></i> Create Job\n                  </Link>\n                  <br />\n                  <br />\n                  <AllMyJobs />\n                </Fragment>\n              )}\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nDashboard.propTypes = {\n  auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\nexport default connect(mapStateToProps)(Dashboard);\n","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\routing\\PrivateRoute.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\CreateApplicantProfile.js",["179"],"import React, { Fragment, useState } from 'react';\nimport { setAlert } from '../../actions/alert';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\nimport { createProfile } from '../../actions/profile';\n\nconst CreateApplicantProfile = ({ createProfile, history }) => {\n  const [error, setError] = useState(false);\n  const [formData, setFormData] = useState({\n    phonenumber: '',\n    skills: '',\n  });\n\n  const { phonenumber, skills } = formData;\n\n  const onChange = (e) =>{\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n    setError(false)\n  }\n  const onSubmit = (e) => {\n    e.preventDefault();\n    // const regex = /^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$/i;\n    console.log(formData.phonenumber.length)\n    if(formData.phonenumber.length<10 || formData.phonenumber.length > 12){\n      setError(\"invalid mobile\")\n      console.log(\"invalid mobile\")\n    }else{\n      createProfile(formData, history, true, false);\n    }\n\n  };\n\n  return (\n    <Fragment>\n      { error &&\n      <div className=\"error-container\" style={{padding:'20px',background:\"red\",color:\"white\"}}>\n        {error}\n      </div>\n}\n      <p className='lead'> Would u like to add your Skills</p>\n      <form className='form' onSubmit={(e) => onSubmit(e)}>\n        <div className='form-group'>\n          <input\n            type='number'\n            placeholder='Enter Phonenumber'\n            name='phonenumber'\n            value={phonenumber}\n            onChange={(e) => onChange(e)}\n\n          />\n        </div>\n        <div className='form-group'>\n          <input\n            type='text'\n            placeholder='Skills'\n            name='skills'\n            value={skills}\n            onChange={(e) => onChange(e)}\n          />\n          <small className='form-text'>\n            Please use comma separated values (eg.HTML,CSS,JavaScript,PHP)\n          </small>\n        </div>\n        <input type='submit' className='btn btn-primary my-1' />\n        <Link className='btn btn-primary my-1' to='/dashboard'>\n          Go To Dashboard\n        </Link>\n      </form>\n    </Fragment>\n  );\n};\n\nCreateApplicantProfile.propTypes = {\n  createProfile: PropTypes.func.isRequired,\n};\n\nexport default connect(null, { createProfile })(\n  withRouter(CreateApplicantProfile)\n);\n","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\CreateRecruiterProfile.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\AddEdu.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\EditRecruiterProfile.js",["180"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\nimport { createProfile, getCurrentProfile } from '../../actions/profile';\n\nconst EditRecruiterProfile = ({\n  createProfile,\n  getCurrentProfile,\n  profile: { profile, loading },\n  history,\n}) => {\n  const [formData, setFormData] = useState({\n    phonenumber: '',\n    bio: '',\n  });\n\n  useEffect(() => {\n    getCurrentProfile();\n    setFormData({\n      phonenumber: loading || !profile.phonenumber ? '' : profile.phonenumber,\n      bio: loading || !profile.bio ? '' : profile.bio,\n    });\n  }, [loading, getCurrentProfile]);\n\n  const { phonenumber, bio } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    createProfile(formData, history, true, false);\n  };\n\n  return (\n    <Fragment>\n      <h1 className='x-large'>Edit Profile</h1>\n      <form className='form' onSubmit={(e) => onSubmit(e)}>\n        <div className='form-group'>\n          <h1>Phone Number:</h1>\n          <input\n            type='Number'\n            placeholder='Phone Number'\n            name='phonenumber'\n            value={phonenumber}\n            onChange={(e) => onChange(e)}\n          />\n        </div>\n        <div className='form-group'>\n          <h1>Bio:</h1>\n          <textarea\n            placeholder='Bio of yourself'\n            name='bio'\n            cols='25'\n            rows='5'\n            value={bio}\n            onChange={(e) => onChange(e)}\n          />\n        </div>\n        <input type='submit' className='btn btn-primary my-1' />\n        <Link className='btn btn-primary my-1' to='/myprofile'>\n          Go Back\n        </Link>\n      </form>\n    </Fragment>\n  );\n};\n\nEditRecruiterProfile.propTypes = {\n  createProfile: PropTypes.func.isRequired,\n  getCurrentProfile: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  profile: state.profile,\n});\nexport default connect(mapStateToProps, { createProfile, getCurrentProfile })(\n  withRouter(EditRecruiterProfile)\n);\n","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\EditApplicantProfile.js",["181"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\nimport { createProfile, getCurrentProfile } from '../../actions/profile';\n// import Edu from './Edu';\n\nconst EditApplicantProfile = ({\n  createProfile,\n  getCurrentProfile,\n  profile: { profile, loading },\n  history,\n}) => {\n  const [formData, setFormData] = useState({\n    phonenumber: '',\n    skills: '',\n  });\n\n  useEffect(() => {\n    getCurrentProfile();\n    setFormData({\n      phonenumber: loading || !profile.phonenumber ? '' : profile.phonenumber,\n      skills: loading || !profile.skills ? '' : profile.skills.join(','),\n    });\n  }, [loading, getCurrentProfile]);\n\n  const { phonenumber, skills } = formData;\n  //console.log(edu);\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    //console.log(Object.keys(error).length);\n    //console.log('updating');\n    createProfile(formData, history, true, false);\n  };\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Fragment>Loading..</Fragment>\n      ) : (\n        <Fragment>\n          <h1 className='x-large'>Edit Profile</h1>\n          <form className='form' onSubmit={(e) => onSubmit(e)}>\n            <div className='form-group'>\n              <h1>Phone Number:</h1>\n              <input\n                type='Number'\n                placeholder='Phonenumber'\n                name='phonenumber'\n                value={phonenumber}\n                onChange={(e) => onChange(e)}\n              />\n            </div>\n            <div className='form-group'>\n              <h1>Skills:</h1>\n              <input\n                type='text'\n                placeholder='Skills'\n                name='skills'\n                value={skills}\n                onChange={(e) => onChange(e)}\n              />\n              <small className='form-text'>\n                Please use comma separated values (eg.HTML,CSS,JavaScript,PHP)\n              </small>\n            </div>\n            <input type='submit' className='btn btn-primary my-1' />\n          </form>\n          <Link className='btn btn-primary my-1' to='/reviewedu'>\n            Review and delete Education\n          </Link>\n          {'   '}\n          <Link className='btn btn-primary my-1' to='/addedu'>\n            Add Education\n          </Link>{' '}\n          <Link className='btn btn-primary my-1' to='/myprofile'>\n            Go Back\n          </Link>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nEditApplicantProfile.propTypes = {\n  createProfile: PropTypes.func.isRequired,\n  getCurrentProfile: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  profile: state.profile,\n});\nexport default connect(mapStateToProps, {\n  createProfile,\n  getCurrentProfile,\n})(withRouter(EditApplicantProfile));\n","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\ReviewEdu.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\MyProfile.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\CreateJob.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\ViewJob.js",["182"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport { getJobById, getMyApplicants } from '../../actions/rjob';\nimport Applicants from './Applicants';\n\nconst ViewJob = ({\n  getJobById,\n  getMyApplicants,\n  rjobst: { rjob, loading },\n  match,\n}) => {\n  useEffect(() => {\n    getJobById(match.params.id);\n    getMyApplicants(match.params.id);\n  }, [getJobById, getMyApplicants]);\n  const [disableshow, toggledisableshow] = useState(false);\n  return (\n    <Fragment>\n      {loading || rjob === null ? (\n        <Fragment>Loading...</Fragment>\n      ) : (\n        <Fragment>\n          <Link className='btn btn-primary' to={`/editjob/${rjob._id}`}>\n            <i className='fa fa-pencil-square'></i> Edit Job\n          </Link>\n          <Link className='btn btn-primary' to='/dashboard'>\n            Go Back\n          </Link>\n          <br />\n          <br />\n          <div>\n            <table>\n              <thead>\n                <tr>\n                  <th>Details</th>\n                  <th>Info</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>Title</td>\n                  <td>{rjob.title}</td>\n                </tr>\n                <tr>\n                  <td> Type of Job </td>\n                  <td>{rjob.typeofjob}</td>\n                </tr>\n                <tr>\n                  <td> Required Skills</td>\n                  <td>{rjob.requiredskills.join(',')}</td>\n                </tr>\n                <tr>\n                  <td>Date of Posting</td>\n                  <td>\n                    <Moment format='DD/MM/YYYY'>{rjob.dateofposting}</Moment>\n                  </td>\n                </tr>\n                <tr>\n                  <td> No of Applications </td>\n                  <td>{rjob.noofapplications}</td>\n                </tr>\n                <tr>\n                  <td> No of positions </td>\n                  <td>{rjob.noofpositions}</td>\n                </tr>\n                <tr>\n                  <td> Max no of Applications </td>\n                  <td>{rjob.maxapplications}</td>\n                </tr>\n                <tr>\n                  <td>Max no of Positions </td>\n                  <td>{rjob.maxpositions}</td>\n                </tr>\n                <tr>\n                  <td> Duration </td>\n                  <td>{rjob.duration} months</td>\n                </tr>\n                <tr>\n                  <td> Salary </td>\n                  <td>Rs. {rjob.salary} </td>\n                </tr>\n                <tr>\n                  <td> Deadline </td>\n                  <td>{moment(rjob.deadline).format('LLL')}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <br />\n          <div className='my-2'>\n            <button\n              onClick={() => toggledisableshow(!disableshow)}\n              type='button'\n              className='btn btn-primary'\n            >\n              Show Applicants\n            </button>\n          </div>\n          {disableshow && (\n            <Fragment>\n              <Applicants />\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nViewJob.propTypes = {\n  getJobById: PropTypes.func.isRequired,\n  rjobst: PropTypes.object.isRequired,\n  getMyApplicants: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  rjobst: state.rjob,\n});\nexport default connect(mapStateToProps, { getJobById, getMyApplicants })(\n  ViewJob\n);\n","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\ApplyJob.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\EditJob.js",["183"],"import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { getJobById, updateJob } from '../../actions/rjob';\nimport moment from 'moment';\n\nconst EditJob = ({\n  updateJob,\n  getJobById,\n  rjobst: { rjob, loading },\n  history,\n  match,\n}) => {\n  const [formData, setFormData] = useState({\n    maxapplications: '',\n    maxpositions: '',\n    deadline: '',\n  });\n\n  useEffect(() => {\n    getJobById(match.params.id);\n    setFormData({\n      maxapplications:\n        loading || !rjob.maxapplications ? '' : rjob.maxapplications,\n      maxpositions: loading || !rjob.maxpositions ? '' : rjob.maxpositions,\n      deadline: loading || !rjob.deadline ? '' : rjob.deadline,\n    });\n  }, [loading, getJobById]);\n  const { maxapplications, maxpositions, deadline } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  const onSubmit = (e) => {\n    e.preventDefault();\n    // (rjob._id);\n    updateJob(formData, history, rjob._id);\n  };\n\n  return (\n    <Fragment>\n      <div>\n        <form className='form' onSubmit={(e) => onSubmit(e)}>\n          <h2>Max no of Applications</h2>\n          <div className='form-group'>\n            <input\n              type='Number'\n              placeholder='* Maximum no of Applications'\n              name='maxapplications'\n              value={maxapplications}\n              onChange={(e) => onChange(e)}\n            />\n          </div>\n          <h2>Max no of Positions</h2>\n          <div className='form-group'>\n            <input\n              type='Number'\n              placeholder='* Maximum no of Positions'\n              name='maxpositions'\n              value={maxpositions}\n              onChange={(e) => onChange(e)}\n            />\n          </div>\n\n          <h2>Deadline</h2>\n          <div className='form-group'>\n            <input\n              type='datetime-local'\n              placeholder='* Deadline'\n              name='deadline'\n              value={moment(deadline).format().slice(0, 16)}\n              onChange={(e) => onChange(e)}\n            />\n          </div>\n\n          <input type='submit' className='btn btn-primary my-1' />\n          <Link className='btn btn-primary' to={`/viewjob/${rjob._id}`}>\n            Go Back\n          </Link>\n        </form>\n      </div>\n    </Fragment>\n  );\n};\n\nEditJob.propTypes = {\n  updateJob: PropTypes.func.isRequired,\n  getJobById: PropTypes.func.isRequired,\n  rjobst: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  rjobst: state.rjob,\n});\nexport default connect(mapStateToProps, {\n  updateJob,\n  getJobById,\n})(withRouter(EditJob));\n","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\MyEmployees.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\MyApplications.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\actions\\alert.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\actions\\types.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\actions\\profile.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\AllMyJobs.js",["184"],"import React, { Fragment, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport PropTypes from 'prop-types';\nimport { getAllMyJobs, delJobById } from '../../actions/rjob';\n\nconst AllMyJobs = ({\n  getAllMyJobs,\n  delJobById,\n  rjobst: { rjobs, loading },\n}) => {\n  useEffect(() => {\n    getAllMyJobs();\n  }, [getAllMyJobs]);\n\n  const edcus = rjobs\n    .filter((item) => item.maxpositions !== item.noofpositions)\n    .map((edu) => (\n      <tr key={edu._id}>\n        <td>{edu.title}</td>\n        <td>\n          <Moment format='DD/MM/YYYY'>{edu.dateofposting}</Moment>\n        </td>\n        <td>{edu.noofapplications}</td>\n        <td>{edu.maxpositions - edu.noofpositions}</td>\n        <Fragment>\n          <td>\n            <Link to={`/viewjob/${edu._id}`} className='btn btn-primary'>\n              View\n            </Link>{' '}\n            <button\n              onClick={() => delJobById(edu._id)}\n              className='btn btn-danger'\n            >\n              Delete\n            </button>\n          </td>\n        </Fragment>\n      </tr>\n    ));\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Fragment>Loading...</Fragment>\n      ) : (\n        <Fragment>\n          <table className='table'>\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Date of posting </th>\n                <th>Number of Applicants</th>\n                <th>Remaining Positions</th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>{edcus}</tbody>\n          </table>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nAllMyJobs.propTypes = {\n  getAllMyJobs: PropTypes.func.isRequired,\n  delJobById: PropTypes.func.isRequired,\n  rjobst: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  rjobst: state.rjob,\n});\n\nexport default connect(mapStateToProps, { getAllMyJobs, delJobById })(\n  AllMyJobs\n);\n","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\AllJobs.js",["185","186","187","188","189","190","191","192"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n//import Moment from 'react-moment';\nimport PropTypes from 'prop-types';\nimport { getAllJobs, getMyApplications } from '../../actions/rjob';\nimport { getCurrentProfile } from '../../actions/profile';\nimport Moment from 'react-moment';\nimport Fuse from 'fuse.js';\n\nconst AllJobs = ({\n  getAllJobs,\n  getMyApplications,\n  getCurrentProfile,\n  rjobst: { rjobs, loading, applicants },\n}) => {\n  const [formData, setFormData] = useState({\n    actual: [],\n  });\n  const [searchData, setSearchData] = useState({\n    search: '',\n    sort: '',\n    filterType: '',\n    filterDuration: '',\n    minsalary: '',\n    maxsalary: '',\n  });\n  useEffect(() => {\n    getAllJobs();\n    getMyApplications();\n    getCurrentProfile();\n    setFormData({\n      actual: loading || rjobs.length === 0 ? [] : rjobs,\n    });\n  }, [getAllJobs, getMyApplications, getCurrentProfile, loading]);\n\n  // console.log(rjobs);\n\n  const { actual } = formData;\n  const {\n    search,\n    sort,\n    filterType,\n    filterDuration,\n    minsalary,\n    maxsalary,\n  } = searchData;\n  const countdown = (date) => {\n    var countDownDate = new Date(date).getTime();\n    var now = new Date().getTime();\n    var distance = countDownDate - now;\n    var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n    var hours = Math.floor(\n      (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n    );\n    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n    return days + 'd ' + hours + 'h ' + minutes + 'm ' + seconds + 's ';\n  };\n\n  const check = (id) => {\n    if (applicants.length > 0) {\n      var x = applicants.filter((app) => app.job === id);\n\n      if (Object.keys(x).length === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  };\n  const checkdeadline = (date) => {\n    var countDownDate = new Date(date).getTime();\n    var now = new Date().getTime();\n    var distance = countDownDate - now;\n    if (distance <= 0) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const isAccepted = () => {\n    if (applicants.length > 0) {\n      var x = applicants.filter((item) => item.stage === 'Accepted');\n      if (Object.keys(x).length === 0) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const checkzero = (x) => {\n    if (x == 0) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  const options = {\n    isCaseSensitive: false,\n    keys: ['title'],\n  };\n  const onChangeSearch = (e) => {\n    setSearchData({ ...searchData, [e.target.name]: e.target.value });\n    let fuse;\n    if (actual.length == 0) {\n      fuse = new Fuse(rjobs, options);\n    } else {\n      fuse = new Fuse(actual, options);\n    }\n    var virtualwi = fuse.search(e.target.value);\n    var virtual = actual;\n    if (actual.length == 0) {\n      virtual = rjobs;\n    }\n\n    if (virtualwi.length !== 0) {\n      virtual = virtualwi.map((kl) => {\n        return kl.item;\n      });\n    } else {\n      virtual = actual;\n      if (actual.length == 0) {\n        virtual = rjobs;\n      }\n    }\n    setFormData({ ...formData, actual: virtual });\n  };\n\n  const onChangeSort = (e) => {\n    setSearchData({ ...searchData, [e.target.name]: e.target.value });\n    var virtual = actual;\n    if (actual.length == 0) {\n      if (e.target.value === 'SortSalaryAsc') {\n        virtual = rjobs.sort((a, b) => a.salary - b.salary);\n      } else if (e.target.value === 'SortSalaryDesc') {\n        virtual = rjobs.sort((a, b) => b.salary - a.salary);\n      } else if (e.target.value === 'SortDurationAsc') {\n        virtual = rjobs.sort((a, b) => a.duration - b.duration);\n      } else if (e.target.value === 'SortDurationDesc') {\n        virtual = rjobs.sort((a, b) => b.duration - a.duration);\n      } else if (e.target.value === 'SortRatingAsc') {\n        virtual = rjobs.sort((a, b) => a.rating - b.rating);\n      } else if (e.target.value === 'SortRatingDesc') {\n        virtual = rjobs.sort((a, b) => b.rating - a.rating);\n      } else {\n        virtual = rjobs;\n      }\n    } else {\n      if (e.target.value === 'SortSalaryAsc') {\n        virtual = actual.sort((a, b) => a.salary - b.salary);\n      } else if (e.target.value === 'SortSalaryDesc') {\n        virtual = actual.sort((a, b) => b.salary - a.salary);\n      } else if (e.target.value === 'SortDurationAsc') {\n        virtual = actual.sort((a, b) => a.duration - b.duration);\n      } else if (e.target.value === 'SortDurationDesc') {\n        virtual = actual.sort((a, b) => b.duration - a.duration);\n      } else if (e.target.value === 'SortRatingAsc') {\n        virtual = actual.sort((a, b) => a.rating - b.rating);\n      } else if (e.target.value === 'SortRatingDesc') {\n        virtual = actual.sort((a, b) => b.rating - a.rating);\n      } else {\n        virtual = actual;\n      }\n    }\n    // console.log(virtual);\n    setFormData({ ...formData, actual: virtual });\n  };\n\n  const onChangefilterType = (e) => {\n    setSearchData({ ...searchData, [e.target.name]: e.target.value });\n    var virtual = actual;\n\n    if (e.target.value === 'Full-time') {\n      virtual = rjobs.filter((a) => a.typeofjob === 'Full-time');\n    } else if (e.target.value === 'Part-time') {\n      virtual = rjobs.filter((a) => a.typeofjob === 'Part-time');\n    } else if (e.target.value === 'Work From Home') {\n      virtual = rjobs.filter((a) => a.typeofjob === 'Work From Home');\n    } else {\n      virtual = rjobs;\n    }\n\n    // console.log(virtual);\n    setFormData({ ...formData, actual: virtual });\n  };\n\n  const onChangefilterDuration = (e) => {\n    setSearchData({ ...searchData, [e.target.name]: e.target.value });\n    var virtual = actual;\n    if (e.target.value !== 0) {\n      virtual = rjobs.filter((a) => a.duration < e.target.value);\n    } else {\n      virtual = rjobs;\n    }\n\n    // console.log(virtual);\n\n    setFormData({ ...formData, actual: virtual });\n  };\n  var crossing = [];\n  const onChangeMinSalary = (e) => {\n    setSearchData({ ...searchData, [e.target.name]: e.target.value });\n    var virtual = actual;\n    if (e.target.value >= 0) {\n      virtual = rjobs.filter((a) => a.salary > e.target.value);\n    } else {\n      virtual = rjobs;\n    }\n    crossing = virtual;\n    //console.log(crossing);\n\n    setFormData({ ...formData, actual: virtual });\n  };\n\n  const onChangeMaxSalary = (e) => {\n    setSearchData({ ...searchData, [e.target.name]: e.target.value });\n    var virtual = rjobs;\n    if (e.target.value !== 0) {\n      virtual = rjobs.filter(\n        (a) => a.salary < e.target.value && a.salary > minsalary\n      );\n    } else {\n      virtual = rjobs;\n    }\n\n    if (virtual.length == 0) {\n      virtual = rjobs;\n    }\n    //console.log(virtual);\n\n    setFormData({ ...formData, actual: virtual });\n  };\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Fragment>Loading...</Fragment>\n      ) : (\n        <Fragment>\n          <form className='myform'>\n            <div className='form-group'>\n              <input\n                type='text'\n                placeholder='Search'\n                name='search'\n                value={search}\n                onChange={(e) => onChangeSearch(e)}\n              />\n            </div>\n            <div className='form-group'>\n              <h2>Sort:</h2>\n              <select\n                type='text'\n                name='sort'\n                className='dropdown'\n                value={sort}\n                onChange={(e) => onChangeSort(e)}\n              >\n                <option value='Normal' defaultValue>\n                  Normal\n                </option>\n                <option value='SortSalaryAsc'>Sort Salary in Asc</option>\n                <option value='SortSalaryDesc'>Sort Salary in Desc</option>\n                <option value='SortDurationAsc'>Sort Duration in Asc</option>\n                <option value='SortDurationDesc'>Sort Duration in Desc</option>\n                {/* <option value='SortRatingAsc'>Sort Rating in Asc</option>\n                <option value='SortRatingDesc'>Sort Rating in Desc</option> */}\n              </select>\n            </div>\n            <div className='form-group'>\n              <h2>Filter by TypeofJob:</h2>\n              <select\n                type='text'\n                name='filterType'\n                className='dropdown'\n                value={filterType}\n                onChange={(e) => onChangefilterType(e)}\n              >\n                <option value='Normal' defaultValue>\n                  Normal\n                </option>\n                <option value='Full-time'>Full Time</option>\n                <option value='Part-time'>Part Time</option>\n                <option value='Work From Home'>Work From Home</option>\n              </select>\n            </div>\n            <div className='form-group'>\n              <h2>Filter by Duration:</h2>\n              <select\n                type='Number'\n                name='filterDuration'\n                className='dropdown'\n                value={filterDuration}\n                onChange={(e) => onChangefilterDuration(e)}\n              >\n                <option value='0' defaultValue>\n                  Normal\n                </option>\n                <option value='1'>1</option>\n                <option value='2'>2</option>\n                <option value='3'>3</option>\n                <option value='4'>4</option>\n                <option value='5'>5</option>\n                <option value='6'>6</option>\n                <option value='7'>7</option>\n              </select>\n            </div>\n            <div className='form-group'>\n              <input\n                type='Number'\n                placeholder='Min salary'\n                name='minsalary'\n                value={minsalary}\n                onChange={(e) => onChangeMinSalary(e)}\n              />\n            </div>\n            <div className='form-group'>\n              <input\n                type='Number'\n                placeholder='Max salary'\n                name='maxsalary'\n                value={maxsalary}\n                onChange={(e) => onChangeMaxSalary(e)}\n              />\n            </div>\n          </form>\n          <table className='table'>\n            <thead>\n              <tr>\n                <th>Title</th>\n                <th>Recruiter </th>\n                <th>Salary</th>\n            \n                {/* <th>Rating</th> */}\n                <th>Duration</th>\n                <th>Date of Posting</th>\n                <th>Deadline</th>\n                <th>Required Skills</th>\n                <th>Type of Job</th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {checkzero(actual.length)\n                ? actual\n                    .filter((item) => checkdeadline(item.deadline))\n                    .map((edu) => (\n                      <tr key={edu._id}>\n                        <td>{edu.title}</td>\n                        <td>{edu.user.name}</td>\n                        <td>{edu.salary}</td>\n                        {/* <td>{edu.rating / edu.noofratings}</td> */}\n                        <td>{edu.duration}</td>\n                        <td>\n                          <Moment format='DD/MM/YYYY'>\n                            {edu.dateofposting}\n                          </Moment>\n                        </td>\n                        <td>{countdown(edu.deadline)}</td>\n                        <td>{edu.requiredskills.join(',')}</td>\n                        <td>{edu.typeofjob}</td>\n                        <Fragment>\n                          <td>\n                            {isAccepted() ? (\n                              <Fragment>\n                                <p className='btn btn-light'>Can't Apply</p>\n                              </Fragment>\n                            ) : (\n                              <Fragment>\n                                {edu.maxapplications !== edu.noofapplications ||\n                                edu.maxpositions !== edu.noofpositions ? (\n                                  <Fragment>\n                                    {check(edu._id) ? (\n                                      <Fragment>\n                                        <Link\n                                          to={`/applyjob/${edu._id}`}\n                                          className='btn btn-primary'\n                                        >\n                                          Apply\n                                        </Link>{' '}\n                                      </Fragment>\n                                    ) : (\n                                      <Fragment>\n                                        <p className='btn btn-success'>\n                                          Applied\n                                        </p>\n                                      </Fragment>\n                                    )}\n                                  </Fragment>\n                                ) : (\n                                  <Fragment>\n                                    <p className='btn btn-light'>FULL</p>\n                                  </Fragment>\n                                )}\n                              </Fragment>\n                            )}\n                          </td>\n                        </Fragment>\n                      </tr>\n                    ))\n                : rjobs\n                    .filter((item) => checkdeadline(item.deadline))\n                    .map((edu) => (\n                      <tr key={edu._id}>\n                        <td>{edu.title}</td>\n                        <td>{edu.user.name}</td>\n                        <td>{edu.salary}</td>\n                        {/* <td>{edu.rating / edu.noofratings}</td> */}\n                        <td>{edu.duration}</td>\n                        <td>\n                          <Moment format='DD/MM/YYYY'>\n                            {edu.dateofposting}\n                          </Moment>\n                        </td>\n                        <td>{countdown(edu.deadline)}</td>\n                        <td>{edu.requiredskills.join(',')}</td>\n                        <td>{edu.typeofjob}</td>\n                        <Fragment>\n                          <td>\n                            {isAccepted() ? (\n                              <Fragment>\n                                <p className='btn btn-light'>Can't Apply</p>\n                              </Fragment>\n                            ) : (\n                              <Fragment>\n                                {edu.maxapplications !== edu.noofapplications ||\n                                edu.maxpositions !== edu.noofpositions ? (\n                                  <Fragment>\n                                    {check(edu._id) ? (\n                                      <Fragment>\n                                        <Link\n                                          to={`/applyjob/${edu._id}`}\n                                          className='btn btn-primary'\n                                        >\n                                          Apply\n                                        </Link>{' '}\n                                      </Fragment>\n                                    ) : (\n                                      <Fragment>\n                                        <p className='btn btn-success'>\n                                          Applied\n                                        </p>\n                                      </Fragment>\n                                    )}\n                                  </Fragment>\n                                ) : (\n                                  <Fragment>\n                                    <p className='btn btn-light'>FULL</p>\n                                  </Fragment>\n                                )}\n                              </Fragment>\n                            )}\n                          </td>\n                        </Fragment>\n                      </tr>\n                    ))}\n            </tbody>\n          </table>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nAllJobs.propTypes = {\n  getAllJobs: PropTypes.func.isRequired,\n  getMyApplications: PropTypes.func.isRequired,\n  getCurrentProfile: PropTypes.func.isRequired,\n  rjobst: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  rjobst: state.rjob,\n});\n\nexport default connect(mapStateToProps, {\n  getAllJobs,\n  getMyApplications,\n  getCurrentProfile,\n})(AllJobs);\n","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\actions\\rjob.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\jobs\\Applicants.js",["193","194"],"import React, { Fragment, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n//import { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport PropTypes from 'prop-types';\nimport { getMyApplicants, changeApplicantStage } from '../../actions/rjob';\n\nconst Applicants = ({\n  getMyApplicants,\n  changeApplicantStage,\n  rjobst: { rjob, applicants, loading },\n}) => {\n  const [formData, setFormData] = useState({\n    actual: [],\n  });\n  const [searchData, setSearchData] = useState({\n    sort: '',\n  });\n  useEffect(() => {\n    getMyApplicants(rjob._id);\n    setFormData({\n      actual: loading || applicants.length === 0 ? [] : applicants,\n    });\n  }, [getMyApplicants, loading]);\n\n  const onClick = (ststage, id) => {\n    changeApplicantStage(ststage, id);\n  };\n\n  const { actual } = formData;\n  const { sort } = searchData;\n\n  const countdown = (date) => {\n    var countDownDate = new Date(date).getTime();\n    var now = new Date().getTime();\n    var distance = countDownDate - now;\n    return distance;\n  };\n\n  const onChangeSort = (e) => {\n    setSearchData({ ...searchData, [e.target.name]: e.target.value });\n    var virtual = applicants;\n\n    if (e.target.value === 'SortNameAsc') {\n      virtual = applicants.sort((a, b) =>\n        a.applicant.name.localcompare(b.applicant.name)\n      );\n    } else if (e.target.value === 'SortNameDesc') {\n      virtual = applicants.sort((a, b) =>\n        b.applicant.name.localcompare(a.applicant.name)\n      );\n    } else if (e.target.value === 'SortDateAsc') {\n      virtual = applicants.sort(\n        (a, b) =>\n          countdown(a.dateofapplication) - countdown(b.dateofapplication)\n      );\n    } else if (e.target.value === 'SortDateDesc') {\n      virtual = applicants.sort(\n        (a, b) =>\n          countdown(b.dateofapplication) - countdown(a.dateofapplication)\n      );\n    } else if (e.target.value === 'SortRatingAsc') {\n      virtual = applicants.sort((a, b) => a.rating - b.rating);\n    } else if (e.target.value === 'SortRatingDesc') {\n      virtual = applicants.sort((a, b) => b.rating - a.rating);\n    } else {\n      virtual = applicants;\n    }\n\n    // console.log(virtual);\n    setFormData({ ...formData, actual: virtual });\n  };\n\n  const edcus = applicants\n    .filter(\n      (item) =>\n        item.stage !== 'Accepted' &&\n        item.stage !== 'Rejected' &&\n        item.stage !== 'Accepted for other'\n    )\n    .map((edu) => (\n      <tr key={edu._id}>\n        <td>{edu.applicant.name}</td>\n        <td>{edu.applicantprofile.skills.join(',')}</td>\n        <td>\n          <Moment format='DD/MM/YYYY'>{edu.dateofapplication}</Moment>\n        </td>\n        <td>\n          <ul>\n            {edu.applicantprofile.education.map((educinst) => (\n              <li key={educinst._id}>\n                <h2>Education</h2>\n                <p>School:{educinst.school}</p>\n                <p>StartYear:{educinst.startYear}</p>\n                <p>\n                  EndYear:{educinst.endYear != null ? educinst.endYear : ' '}\n                </p>\n              </li>\n            ))}\n          </ul>\n        </td>\n        <td>{edu.sop}</td>\n        <td>{edu.applicant.rating / edu.applicant.noofratings}</td>\n        <td>\n          {edu.stage === 'ShortListed' ? (\n            <button\n              onClick={() => onClick('Accepted', edu._id)}\n              className='btn btn-success'\n            >\n              Accept\n            </button>\n          ) : (\n            <button\n              onClick={() => onClick('ShortListed', edu._id)}\n              className='btn btn-primary'\n            >\n              ShortList\n            </button>\n          )}\n          <button\n            onClick={() => onClick('Rejected', edu._id)}\n            className='btn btn-danger'\n          >\n            Reject\n          </button>\n        </td>\n        {/* //http://azoom.herokuapp.com/ */}\n        <a href='http://localhost:4000/' method='blank' className='btn btn-success'>LiveCall</a>\n      </tr>\n    ));\n\n  return (\n    <Fragment>\n      {loading ? (\n        <Fragment>Loading...</Fragment>\n      ) : (\n        <Fragment>\n          <form className='myform'>\n            <div className='form-group'>\n              <h2>Sort:</h2>\n              <select\n                type='text'\n                name='sort'\n                className='dropdown'\n                value={sort}\n                onChange={(e) => onChangeSort(e)}\n              >\n                <option value='Normal' defaultValue>\n                  Normal\n                </option>\n                <option value='SortNameAsc'>Sort Name in Asc</option>\n                <option value='SortNameDesc'>Sort Name in Desc</option>\n                <option value='SortDateAsc'>Sort Date in Asc</option>\n                <option value='SortDateDesc'>Sort Date in Desc</option>\n                {/* <option value='SortRatingAsc'>Sort Rating in Asc</option>\n                <option value='SortRatingDesc'>Sort Rating in Desc</option> */}\n              </select>\n            </div>\n          </form>\n          <table className='table'>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Skills </th>\n                <th>Date of Application</th>\n                <th>Education</th>\n                <th>SOP</th>\n                {/* <th>Rating</th> */}\n                <th>Stage of Application</th>\n                <th>Interview</th>\n              </tr>\n            </thead>\n            <tbody>{edcus}</tbody>\n          </table>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n  \n};\n\nApplicants.propTypes = {\n  getMyApplicants: PropTypes.func.isRequired,\n  changeApplicantStage: PropTypes.func.isRequired,\n  rjobst: PropTypes.object.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  rjobst: state.rjob,\n});\n\nexport default connect(mapStateToProps, {\n  getMyApplicants,\n  changeApplicantStage,\n})(Applicants);\n","C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\components\\profileforms\\Edu.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\reducers\\index.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\reducers\\auth.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\reducers\\alert.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\reducers\\profile.js",[],"C:\\Users\\Digital\\Desktop\\SBCOllageProjects\\JobPortal-main\\frontend\\src\\reducers\\rjob.js",[],["195","196"],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":30,"column":32,"nodeType":"203","messageId":"204","endLine":30,"endColumn":33,"suggestions":"205"},{"ruleId":"201","severity":1,"message":"206","line":30,"column":40,"nodeType":"203","messageId":"204","endLine":30,"endColumn":41,"suggestions":"207"},{"ruleId":"201","severity":1,"message":"202","line":30,"column":56,"nodeType":"203","messageId":"204","endLine":30,"endColumn":57,"suggestions":"208"},{"ruleId":"201","severity":1,"message":"206","line":30,"column":64,"nodeType":"203","messageId":"204","endLine":30,"endColumn":65,"suggestions":"209"},{"ruleId":"201","severity":1,"message":"206","line":30,"column":73,"nodeType":"203","messageId":"204","endLine":30,"endColumn":74,"suggestions":"210"},{"ruleId":"201","severity":1,"message":"206","line":30,"column":77,"nodeType":"203","messageId":"204","endLine":30,"endColumn":78,"suggestions":"211"},{"ruleId":"201","severity":1,"message":"202","line":30,"column":93,"nodeType":"203","messageId":"204","endLine":30,"endColumn":94,"suggestions":"212"},{"ruleId":"201","severity":1,"message":"206","line":30,"column":101,"nodeType":"203","messageId":"204","endLine":30,"endColumn":102,"suggestions":"213"},{"ruleId":"201","severity":1,"message":"202","line":30,"column":118,"nodeType":"203","messageId":"204","endLine":30,"endColumn":119,"suggestions":"214"},{"ruleId":"201","severity":1,"message":"206","line":30,"column":126,"nodeType":"203","messageId":"204","endLine":30,"endColumn":127,"suggestions":"215"},{"ruleId":"216","severity":1,"message":"217","line":1,"column":27,"nodeType":"218","messageId":"219","endLine":1,"endColumn":36},{"ruleId":"216","severity":1,"message":"220","line":2,"column":10,"nodeType":"218","messageId":"219","endLine":2,"endColumn":18},{"ruleId":"221","severity":1,"message":"222","line":24,"column":6,"nodeType":"223","endLine":24,"endColumn":34,"suggestions":"224"},{"ruleId":"221","severity":1,"message":"225","line":25,"column":6,"nodeType":"223","endLine":25,"endColumn":34,"suggestions":"226"},{"ruleId":"221","severity":1,"message":"227","line":19,"column":6,"nodeType":"223","endLine":19,"endColumn":35,"suggestions":"228"},{"ruleId":"221","severity":1,"message":"229","line":29,"column":6,"nodeType":"223","endLine":29,"endColumn":27,"suggestions":"230"},{"ruleId":"216","severity":1,"message":"231","line":1,"column":38,"nodeType":"218","messageId":"219","endLine":1,"endColumn":46},{"ruleId":"221","severity":1,"message":"232","line":35,"column":6,"nodeType":"223","endLine":35,"endColumn":65,"suggestions":"233"},{"ruleId":"234","severity":1,"message":"235","line":99,"column":11,"nodeType":"236","messageId":"237","endLine":99,"endColumn":13},{"ruleId":"234","severity":1,"message":"235","line":112,"column":23,"nodeType":"236","messageId":"237","endLine":112,"endColumn":25},{"ruleId":"234","severity":1,"message":"235","line":119,"column":23,"nodeType":"236","messageId":"237","endLine":119,"endColumn":25},{"ruleId":"234","severity":1,"message":"235","line":129,"column":25,"nodeType":"236","messageId":"237","endLine":129,"endColumn":27},{"ruleId":"234","severity":1,"message":"235","line":139,"column":23,"nodeType":"236","messageId":"237","endLine":139,"endColumn":25},{"ruleId":"216","severity":1,"message":"238","line":216,"column":5,"nodeType":"218","messageId":"219","endLine":216,"endColumn":13},{"ruleId":"234","severity":1,"message":"235","line":233,"column":24,"nodeType":"236","messageId":"237","endLine":233,"endColumn":26},{"ruleId":"221","severity":1,"message":"239","line":24,"column":6,"nodeType":"223","endLine":24,"endColumn":32,"suggestions":"240"},{"ruleId":"216","severity":1,"message":"241","line":30,"column":11,"nodeType":"218","messageId":"219","endLine":30,"endColumn":17},{"ruleId":"197","replacedBy":"242"},{"ruleId":"199","replacedBy":"243"},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["246","247"],"Unnecessary escape character: \\\".",["248","249"],["250","251"],["252","253"],["254","255"],["256","257"],["258","259"],["260","261"],["262","263"],["264","265"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setAlert' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'profile.bio' and 'profile.phonenumber'. Either include them or remove the dependency array. If 'setFormData' needs the current value of 'profile.phonenumber', you can also switch to useReducer instead of useState and read 'profile.phonenumber' in the reducer.","ArrayExpression",["266"],"React Hook useEffect has missing dependencies: 'profile.phonenumber' and 'profile.skills'. Either include them or remove the dependency array. If 'setFormData' needs the current value of 'profile.phonenumber', you can also switch to useReducer instead of useState and read 'profile.phonenumber' in the reducer.",["267"],"React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.",["268"],"React Hook useEffect has missing dependencies: 'match.params.id', 'rjob.deadline', 'rjob.maxapplications', and 'rjob.maxpositions'. Either include them or remove the dependency array. If 'setFormData' needs the current value of 'rjob.maxapplications', you can also switch to useReducer instead of useState and read 'rjob.maxapplications' in the reducer.",["269"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'rjobs'. Either include it or remove the dependency array. If 'setFormData' needs the current value of 'rjobs', you can also switch to useReducer instead of useState and read 'rjobs' in the reducer.",["270"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'crossing' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'applicants' and 'rjob._id'. Either include them or remove the dependency array. If 'setFormData' needs the current value of 'applicants', you can also switch to useReducer instead of useState and read 'applicants' in the reducer.",["271"],"'actual' is assigned a value but never used.",["244"],["245"],"no-global-assign","no-unsafe-negation",{"messageId":"272","fix":"273","desc":"274"},{"messageId":"275","fix":"276","desc":"277"},{"messageId":"272","fix":"278","desc":"274"},{"messageId":"275","fix":"279","desc":"277"},{"messageId":"272","fix":"280","desc":"274"},{"messageId":"275","fix":"281","desc":"277"},{"messageId":"272","fix":"282","desc":"274"},{"messageId":"275","fix":"283","desc":"277"},{"messageId":"272","fix":"284","desc":"274"},{"messageId":"275","fix":"285","desc":"277"},{"messageId":"272","fix":"286","desc":"274"},{"messageId":"275","fix":"287","desc":"277"},{"messageId":"272","fix":"288","desc":"274"},{"messageId":"275","fix":"289","desc":"277"},{"messageId":"272","fix":"290","desc":"274"},{"messageId":"275","fix":"291","desc":"277"},{"messageId":"272","fix":"292","desc":"274"},{"messageId":"275","fix":"293","desc":"277"},{"messageId":"272","fix":"294","desc":"274"},{"messageId":"275","fix":"295","desc":"277"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},"removeEscape",{"range":"308","text":"309"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"310","text":"311"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"312","text":"309"},{"range":"313","text":"311"},{"range":"314","text":"309"},{"range":"315","text":"311"},{"range":"316","text":"309"},{"range":"317","text":"311"},{"range":"318","text":"309"},{"range":"319","text":"311"},{"range":"320","text":"309"},{"range":"321","text":"311"},{"range":"322","text":"309"},{"range":"323","text":"311"},{"range":"324","text":"309"},{"range":"325","text":"311"},{"range":"326","text":"309"},{"range":"327","text":"311"},{"range":"328","text":"309"},{"range":"329","text":"311"},"Update the dependencies array to be: [loading, getCurrentProfile, profile.phonenumber, profile.bio]",{"range":"330","text":"331"},"Update the dependencies array to be: [loading, getCurrentProfile, profile.phonenumber, profile.skills]",{"range":"332","text":"333"},"Update the dependencies array to be: [getJobById, getMyApplicants, match.params.id]",{"range":"334","text":"335"},"Update the dependencies array to be: [loading, getJobById, match.params.id, rjob.maxapplications, rjob.maxpositions, rjob.deadline]",{"range":"336","text":"337"},"Update the dependencies array to be: [getAllJobs, getMyApplications, getCurrentProfile, loading, rjobs]",{"range":"338","text":"339"},"Update the dependencies array to be: [applicants, getMyApplicants, loading, rjob._id]",{"range":"340","text":"341"},[817,818],"",[817,817],"\\",[825,826],[825,825],[841,842],[841,841],[849,850],[849,849],[858,859],[858,858],[862,863],[862,862],[878,879],[878,878],[886,887],[886,886],[903,904],[903,903],[911,912],[911,911],[683,711],"[loading, getCurrentProfile, profile.phonenumber, profile.bio]",[733,761],"[loading, getCurrentProfile, profile.phonenumber, profile.skills]",[542,571],"[getJobById, getMyApplicants, match.params.id]",[817,838],"[loading, getJobById, match.params.id, rjob.maxapplications, rjob.maxpositions, rjob.deadline]",[942,1001],"[getAllJobs, getMyApplications, getCurrentProfile, loading, rjobs]",[692,718],"[applicants, getMyApplicants, loading, rjob._id]"]
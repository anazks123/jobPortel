{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_RJOBS, RJOB_ERROR, CREATE_JOB, DELETE_JOB, SET_RJOB, RESET_RJOB, ADD_APPLY, GET_APPLYS, RESET_APPLYS } from './types'; // get all my jobs\n\nexport const getAllMyJobs = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/jobs/my');\n    dispatch({\n      type: GET_RJOBS,\n      payload: res.data\n    });\n    dispatch({\n      type: RESET_APPLYS\n    });\n  } catch (err) {\n    dispatch({\n      type: RJOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //create job\n\nexport const createJob = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/jobs', formData, config);\n    dispatch({\n      type: CREATE_JOB,\n      payload: res.data\n    });\n    dispatch(setAlert('Job Created', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    const inerror = err.response.data;\n\n    if (inerror) {\n      dispatch(setAlert(inerror.msg, 'danger'));\n    }\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: RJOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //UPDATE JOB\n\nexport const updateJob = (formData, history, id) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/jobs/edit/${id}`, formData, config);\n    dispatch({\n      type: SET_RJOB,\n      payload: res.data\n    });\n    dispatch(setAlert('Job Updated', 'success'));\n    history.push(`/viewjob/${id}`);\n  } catch (err) {\n    const errors = err.response.data.errors;\n    const inerror = err.response.data;\n\n    if (inerror) {\n      dispatch(setAlert(inerror.msg, 'danger'));\n    }\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: RESET_RJOB,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //get job by id\n\nexport const getJobById = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/jobs/getjob/${id}`); //console.log(res.data);\n\n    dispatch({\n      type: SET_RJOB,\n      payload: res.data\n    });\n  } catch (err) {\n    const inerror = err.response.data;\n\n    if (inerror) {\n      dispatch(setAlert(inerror.msg, 'danger'));\n    }\n\n    dispatch({\n      type: RESET_RJOB,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //delete job\n\nexport const delJobById = id => async dispatch => {\n  if (window.confirm('Are you sure do delete? This will reject all applications and employees ot this job')) {\n    try {\n      await axios.delete(`/api/jobs/${id}`); //console.log(res.data);\n\n      dispatch({\n        type: DELETE_JOB,\n        payload: id\n      });\n      dispatch(setAlert('Deleted Job Succesfully', 'success'));\n    } catch (err) {\n      const inerror = err.response.data;\n\n      if (inerror) {\n        dispatch(setAlert(inerror.msg, 'danger'));\n      }\n\n      dispatch({\n        type: RJOB_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n}; //get all jobs\n// get all my jobs\n\nexport const getAllJobs = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/jobs/');\n    dispatch({\n      type: GET_RJOBS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: RJOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //get my applications\n\nexport const getMyApplications = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/jobs/myapplications');\n    dispatch({\n      type: GET_APPLYS,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: RJOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //apply for a job\n\nexport const applyJob = (formData, history, id) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/jobs/apply/${id}`, formData, config);\n    dispatch({\n      type: ADD_APPLY,\n      payload: res.data\n    });\n    dispatch(setAlert('Applied Successfully', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    const inerror = err.response.data;\n\n    if (inerror) {\n      dispatch(setAlert(inerror.msg, 'danger'));\n    }\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: RJOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //get my applicants\n\nexport const getMyApplicants = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/jobs/applicants/${id}`);\n    dispatch({\n      type: GET_APPLYS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: RJOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //changing applicant stage\n\nexport const changeApplicantStage = (stage, id) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const formData = JSON.stringify({\n      stage\n    });\n    const res = await axios.put(`/api/jobs/stage/${id}`, formData, config);\n    dispatch({\n      type: GET_APPLYS,\n      payload: res.data\n    });\n  } catch (err) {\n    const inerror = err.response.data;\n\n    if (inerror) {\n      dispatch(setAlert(inerror.msg, 'danger'));\n    }\n\n    dispatch({\n      type: RJOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //get my employees\n\nexport const getMyEmployees = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/jobs/myemployees');\n    dispatch({\n      type: GET_APPLYS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: RJOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Digital/Desktop/SBCOllageProjects/JobPortal-main/frontend/src/actions/rjob.js"],"names":["axios","setAlert","GET_RJOBS","RJOB_ERROR","CREATE_JOB","DELETE_JOB","SET_RJOB","RESET_RJOB","ADD_APPLY","GET_APPLYS","RESET_APPLYS","getAllMyJobs","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","createJob","formData","history","config","headers","post","push","errors","inerror","forEach","error","updateJob","id","getJobById","delJobById","window","confirm","delete","getAllJobs","getMyApplications","console","log","applyJob","getMyApplicants","changeApplicantStage","stage","JSON","stringify","put","getMyEmployees"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  GET_RJOBS,\n  RJOB_ERROR,\n  CREATE_JOB,\n  DELETE_JOB,\n  SET_RJOB,\n  RESET_RJOB,\n  ADD_APPLY,\n  GET_APPLYS,\n  RESET_APPLYS,\n} from './types';\n\n// get all my jobs\nexport const getAllMyJobs = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/jobs/my');\n    dispatch({\n      type: GET_RJOBS,\n      payload: res.data,\n    });\n    dispatch({\n      type: RESET_APPLYS,\n    });\n  } catch (err) {\n    dispatch({\n      type: RJOB_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//create job\nexport const createJob = (formData, history) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.post('/api/jobs', formData, config);\n    dispatch({\n      type: CREATE_JOB,\n      payload: res.data,\n    });\n    dispatch(setAlert('Job Created', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    const inerror = err.response.data;\n    if (inerror) {\n      dispatch(setAlert(inerror.msg, 'danger'));\n    }\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: RJOB_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//UPDATE JOB\nexport const updateJob = (formData, history, id) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.post(`/api/jobs/edit/${id}`, formData, config);\n    dispatch({\n      type: SET_RJOB,\n      payload: res.data,\n    });\n    dispatch(setAlert('Job Updated', 'success'));\n    history.push(`/viewjob/${id}`);\n  } catch (err) {\n    const errors = err.response.data.errors;\n    const inerror = err.response.data;\n    if (inerror) {\n      dispatch(setAlert(inerror.msg, 'danger'));\n    }\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: RESET_RJOB,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//get job by id\nexport const getJobById = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/jobs/getjob/${id}`);\n    //console.log(res.data);\n    dispatch({\n      type: SET_RJOB,\n      payload: res.data,\n    });\n  } catch (err) {\n    const inerror = err.response.data;\n    if (inerror) {\n      dispatch(setAlert(inerror.msg, 'danger'));\n    }\n    dispatch({\n      type: RESET_RJOB,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//delete job\nexport const delJobById = (id) => async (dispatch) => {\n  if (\n    window.confirm(\n      'Are you sure do delete? This will reject all applications and employees ot this job'\n    )\n  ) {\n    try {\n      await axios.delete(`/api/jobs/${id}`);\n      //console.log(res.data);\n      dispatch({\n        type: DELETE_JOB,\n        payload: id,\n      });\n      dispatch(setAlert('Deleted Job Succesfully', 'success'));\n    } catch (err) {\n      const inerror = err.response.data;\n      if (inerror) {\n        dispatch(setAlert(inerror.msg, 'danger'));\n      }\n      dispatch({\n        type: RJOB_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status },\n      });\n    }\n  }\n};\n\n//get all jobs\n// get all my jobs\nexport const getAllJobs = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/jobs/');\n    dispatch({\n      type: GET_RJOBS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: RJOB_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//get my applications\nexport const getMyApplications = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/jobs/myapplications');\n    dispatch({\n      type: GET_APPLYS,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: RJOB_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//apply for a job\nexport const applyJob = (formData, history, id) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.post(`/api/jobs/apply/${id}`, formData, config);\n    dispatch({\n      type: ADD_APPLY,\n      payload: res.data,\n    });\n    dispatch(setAlert('Applied Successfully', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n    const inerror = err.response.data;\n    if (inerror) {\n      dispatch(setAlert(inerror.msg, 'danger'));\n    }\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: RJOB_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//get my applicants\nexport const getMyApplicants = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/jobs/applicants/${id}`);\n    dispatch({\n      type: GET_APPLYS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: RJOB_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//changing applicant stage\nexport const changeApplicantStage = (stage, id) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const formData = JSON.stringify({ stage });\n    const res = await axios.put(`/api/jobs/stage/${id}`, formData, config);\n    dispatch({\n      type: GET_APPLYS,\n      payload: res.data,\n    });\n  } catch (err) {\n    const inerror = err.response.data;\n    if (inerror) {\n      dispatch(setAlert(inerror.msg, 'danger'));\n    }\n    dispatch({\n      type: RJOB_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//get my employees\nexport const getMyEmployees = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/jobs/myemployees');\n    dispatch({\n      type: GET_APPLYS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: RJOB_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { GET_RJOBS, RJOB_ERROR, CREATE_JOB, DELETE_JOB, SET_RJOB, RESET_RJOB, ADD_APPLY, CLEAR_JOBS, GET_APPLYS, RESET_APPLYS } from '../actions/types';\nconst initialstate = {\n  rjobs: [],\n  rjob: null,\n  applicants: [],\n  loading: true,\n  error: {}\n};\n\nconst RjobReducer = (state = initialstate, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_RJOBS:\n      return { ...state,\n        rjobs: payload,\n        rjob: null,\n        loading: false\n      };\n\n    case CREATE_JOB:\n      return { ...state,\n        rjobs: [...state.rjobs, payload],\n        loading: false\n      };\n\n    case SET_RJOB:\n      return { ...state,\n        rjob: payload,\n        loading: false\n      };\n\n    case GET_APPLYS:\n      return { ...state,\n        applicants: payload,\n        loading: false\n      };\n\n    case ADD_APPLY:\n      return { ...state,\n        applicants: [...state.applicants, payload],\n        loading: false\n      };\n\n    case RESET_APPLYS:\n      return { ...state,\n        applicants: [],\n        loading: false\n      };\n\n    case RESET_RJOB:\n      return { ...state,\n        rjob: null,\n        error: payload,\n        loading: false\n      };\n\n    case DELETE_JOB:\n      return { ...state,\n        rjobs: state.rjobs.filter(job => job._id !== payload),\n        loading: false\n      };\n\n    case RJOB_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case CLEAR_JOBS:\n      return { ...state,\n        rjobs: [],\n        rjob: null,\n        applicants: [],\n        error: {},\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = RjobReducer;\nexport default RjobReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"RjobReducer\");","map":{"version":3,"sources":["D:/JobPortal-main/frontend/src/reducers/rjob.js"],"names":["GET_RJOBS","RJOB_ERROR","CREATE_JOB","DELETE_JOB","SET_RJOB","RESET_RJOB","ADD_APPLY","CLEAR_JOBS","GET_APPLYS","RESET_APPLYS","initialstate","rjobs","rjob","applicants","loading","error","RjobReducer","state","action","type","payload","filter","job","_id"],"mappings":"AAAA,SACEA,SADF,EAEEC,UAFF,EAGEC,UAHF,EAIEC,UAJF,EAKEC,QALF,EAMEC,UANF,EAOEC,SAPF,EAQEC,UARF,EASEC,UATF,EAUEC,YAVF,QAWO,kBAXP;AAaA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,UAAU,EAAE,EAHO;AAInBC,EAAAA,OAAO,EAAE,IAJU;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACpD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKnB,SAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELN,QAAAA,KAAK,EAAES,OAFF;AAGLR,QAAAA,IAAI,EAAE,IAHD;AAILE,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF,SAAKZ,UAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELN,QAAAA,KAAK,EAAE,CAAC,GAAGM,KAAK,CAACN,KAAV,EAAiBS,OAAjB,CAFF;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKV,QAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELL,QAAAA,IAAI,EAAEQ,OAFD;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKN,UAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELJ,QAAAA,UAAU,EAAEO,OAFP;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKR,SAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELJ,QAAAA,UAAU,EAAE,CAAC,GAAGI,KAAK,CAACJ,UAAV,EAAsBO,OAAtB,CAFP;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKL,YAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELJ,QAAAA,UAAU,EAAE,EAFP;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKT,UAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELL,QAAAA,IAAI,EAAE,IAFD;AAGLG,QAAAA,KAAK,EAAEK,OAHF;AAILN,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF,SAAKX,UAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYU,MAAZ,CAAoBC,GAAD,IAASA,GAAG,CAACC,GAAJ,KAAYH,OAAxC,CAFF;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKb,UAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELF,QAAAA,KAAK,EAAEK,OAFF;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKP,UAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELN,QAAAA,KAAK,EAAE,EAFF;AAGLC,QAAAA,IAAI,EAAE,IAHD;AAILC,QAAAA,UAAU,EAAE,EAJP;AAKLE,QAAAA,KAAK,EAAE,EALF;AAMLD,QAAAA,OAAO,EAAE;AANJ,OAAP;;AAQF;AACE,aAAOG,KAAP;AAnEJ;AAqED,CAvED;;KAAMD,W;AAyEN,eAAeA,WAAf","sourcesContent":["import {\n  GET_RJOBS,\n  RJOB_ERROR,\n  CREATE_JOB,\n  DELETE_JOB,\n  SET_RJOB,\n  RESET_RJOB,\n  ADD_APPLY,\n  CLEAR_JOBS,\n  GET_APPLYS,\n  RESET_APPLYS,\n} from '../actions/types';\n\nconst initialstate = {\n  rjobs: [],\n  rjob: null,\n  applicants: [],\n  loading: true,\n  error: {},\n};\n\nconst RjobReducer = (state = initialstate, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case GET_RJOBS:\n      return {\n        ...state,\n        rjobs: payload,\n        rjob: null,\n        loading: false,\n      };\n    case CREATE_JOB:\n      return {\n        ...state,\n        rjobs: [...state.rjobs, payload],\n        loading: false,\n      };\n    case SET_RJOB:\n      return {\n        ...state,\n        rjob: payload,\n        loading: false,\n      };\n    case GET_APPLYS:\n      return {\n        ...state,\n        applicants: payload,\n        loading: false,\n      };\n    case ADD_APPLY:\n      return {\n        ...state,\n        applicants: [...state.applicants, payload],\n        loading: false,\n      };\n    case RESET_APPLYS:\n      return {\n        ...state,\n        applicants: [],\n        loading: false,\n      };\n    case RESET_RJOB:\n      return {\n        ...state,\n        rjob: null,\n        error: payload,\n        loading: false,\n      };\n    case DELETE_JOB:\n      return {\n        ...state,\n        rjobs: state.rjobs.filter((job) => job._id !== payload),\n        loading: false,\n      };\n    case RJOB_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n      };\n    case CLEAR_JOBS:\n      return {\n        ...state,\n        rjobs: [],\n        rjob: null,\n        applicants: [],\n        error: {},\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default RjobReducer;\n"]},"metadata":{},"sourceType":"module"}
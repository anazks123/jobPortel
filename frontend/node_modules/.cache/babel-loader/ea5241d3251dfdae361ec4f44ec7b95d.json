{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\JobPortal-main\\\\frontend\\\\src\\\\components\\\\jobs\\\\EditJob.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { getJobById, updateJob } from '../../actions/rjob';\nimport moment from 'moment';\n\nconst EditJob = ({\n  updateJob,\n  getJobById,\n  rjobst: {\n    rjob,\n    loading\n  },\n  history,\n  match\n}) => {\n  _s();\n\n  const [formData, setFormData] = useState({\n    maxapplications: '',\n    maxpositions: '',\n    deadline: ''\n  });\n  useEffect(() => {\n    getJobById(match.params.id);\n    setFormData({\n      maxapplications: loading || !rjob.maxapplications ? '' : rjob.maxapplications,\n      maxpositions: loading || !rjob.maxpositions ? '' : rjob.maxpositions,\n      deadline: loading || !rjob.deadline ? '' : rjob.deadline\n    });\n  }, [loading, getJobById]);\n  const {\n    maxapplications,\n    maxpositions,\n    deadline\n  } = formData;\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = e => {\n    e.preventDefault(); // (rjob._id);\n\n    updateJob(formData, history, rjob._id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: e => onSubmit(e),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Max no of Applications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"Number\",\n            placeholder: \"* Maximum no of Applications\",\n            name: \"maxapplications\",\n            value: maxapplications,\n            onChange: e => onChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Max no of Positions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"Number\",\n            placeholder: \"* Maximum no of Positions\",\n            name: \"maxpositions\",\n            value: maxpositions,\n            onChange: e => onChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Deadline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            placeholder: \"* Deadline\",\n            name: \"deadline\",\n            value: moment(deadline).format().slice(0, 16),\n            onChange: e => onChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          className: \"btn btn-primary my-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn btn-primary\",\n          to: `/viewjob/${rjob._id}`,\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditJob, \"tm/JYSD1jl5VjLRr1WpNWqj/F6s=\");\n\n_c = EditJob;\nEditJob.propTypes = {\n  updateJob: PropTypes.func.isRequired,\n  getJobById: PropTypes.func.isRequired,\n  rjobst: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  rjobst: state.rjob\n});\n\nexport default connect(mapStateToProps, {\n  updateJob,\n  getJobById\n})(withRouter(EditJob));\n\nvar _c;\n\n$RefreshReg$(_c, \"EditJob\");","map":{"version":3,"sources":["D:/JobPortal-main/frontend/src/components/jobs/EditJob.js"],"names":["React","Fragment","useState","useEffect","PropTypes","connect","Link","withRouter","getJobById","updateJob","moment","EditJob","rjobst","rjob","loading","history","match","formData","setFormData","maxapplications","maxpositions","deadline","params","id","onChange","e","target","name","value","onSubmit","preventDefault","_id","format","slice","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { getJobById, updateJob } from '../../actions/rjob';\nimport moment from 'moment';\n\nconst EditJob = ({\n  updateJob,\n  getJobById,\n  rjobst: { rjob, loading },\n  history,\n  match,\n}) => {\n  const [formData, setFormData] = useState({\n    maxapplications: '',\n    maxpositions: '',\n    deadline: '',\n  });\n\n  useEffect(() => {\n    getJobById(match.params.id);\n    setFormData({\n      maxapplications:\n        loading || !rjob.maxapplications ? '' : rjob.maxapplications,\n      maxpositions: loading || !rjob.maxpositions ? '' : rjob.maxpositions,\n      deadline: loading || !rjob.deadline ? '' : rjob.deadline,\n    });\n  }, [loading, getJobById]);\n  const { maxapplications, maxpositions, deadline } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  const onSubmit = (e) => {\n    e.preventDefault();\n    // (rjob._id);\n    updateJob(formData, history, rjob._id);\n  };\n\n  return (\n    <Fragment>\n      <div>\n        <form className='form' onSubmit={(e) => onSubmit(e)}>\n          <h2>Max no of Applications</h2>\n          <div className='form-group'>\n            <input\n              type='Number'\n              placeholder='* Maximum no of Applications'\n              name='maxapplications'\n              value={maxapplications}\n              onChange={(e) => onChange(e)}\n            />\n          </div>\n          <h2>Max no of Positions</h2>\n          <div className='form-group'>\n            <input\n              type='Number'\n              placeholder='* Maximum no of Positions'\n              name='maxpositions'\n              value={maxpositions}\n              onChange={(e) => onChange(e)}\n            />\n          </div>\n\n          <h2>Deadline</h2>\n          <div className='form-group'>\n            <input\n              type='datetime-local'\n              placeholder='* Deadline'\n              name='deadline'\n              value={moment(deadline).format().slice(0, 16)}\n              onChange={(e) => onChange(e)}\n            />\n          </div>\n\n          <input type='submit' className='btn btn-primary my-1' />\n          <Link className='btn btn-primary' to={`/viewjob/${rjob._id}`}>\n            Go Back\n          </Link>\n        </form>\n      </div>\n    </Fragment>\n  );\n};\n\nEditJob.propTypes = {\n  updateJob: PropTypes.func.isRequired,\n  getJobById: PropTypes.func.isRequired,\n  rjobst: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  rjobst: state.rjob,\n});\nexport default connect(mapStateToProps, {\n  updateJob,\n  getJobById,\n})(withRouter(EditJob));\n"]},"metadata":{},"sourceType":"module"}